{"version":3,"sources":["helpers/cli.ts","tasks/add-file.ts","helpers/runner.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"../src","sourcesContent":["\nexport type Commands = 'add' | 'deploy' | '--url';\n\nexport const includes = (i: Commands) => process.argv.toString().includes(i);\nexport const nextOrDefault = (i: Commands, fb: any = true, type = p => p) => {\n  if (process.argv.toString().includes(i)) {\n    const isNextArgumentPresent = process.argv[process.argv.indexOf(i) + 1];\n    if (!isNextArgumentPresent) {\n      return fb;\n    }\n    if (isNextArgumentPresent.includes('--')) {\n      return fb;\n    }\n    return type(isNextArgumentPresent);\n  }\n  return fb;\n};\n","import request from 'request';\nimport { createReadStream } from 'fs';\nimport { nextOrDefault } from '../helpers/cli';\nimport { AbstractRunner } from '../tokens';\n\nexport class AddFile implements AbstractRunner<{ ETag: string }> {\n  async run() {\n    return new Promise<{ ETag: string }>((resolve, reject) => {\n      request.post(\n        {\n          url: nextOrDefault('--url', 'http://0.0.0.0:9000/upload', v =>\n            String(v)\n          ),\n          formData: {\n            file: createReadStream(nextOrDefault('add'))\n          }\n        },\n        (error, response, body) => {\n          if (error) {\n            return reject(error);\n          }\n          resolve(body);\n        }\n      );\n    });\n  }\n}\n","import { AbstractRunner } from '../tokens';\nimport { Container } from '@rxdi/core';\nimport { includes } from './cli';\nimport { AddFile } from '../tasks/add-file';\n\nexport async function Runner<T>() {\n  let task: Function;\n  if (includes('add')) {\n    task = AddFile;\n  }\n  return await Container.get<AbstractRunner<T>>(task).run();\n}\n","import { Runner } from './helpers/runner';\n\nasync function Main() {\n  try {\n    const body = await Runner();\n    console.log(body);\n    process.exit(0);\n  } catch (e) {\n    console.log(e);\n    process.exit(1);\n  }\n}\n\nMain();\n"]}