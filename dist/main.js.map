{"version":3,"sources":["helpers/cli.ts","core/compression.service.ts","tasks/add-file.ts","helpers/runner.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"../src","sourcesContent":["\nexport type Commands = 'add' | 'deploy' | '--url' | '--zip-name';\n\nexport const includes = (i: Commands) => process.argv.toString().includes(i);\nexport const nextOrDefault = (i: Commands, fb: any = true, type = p => p) => {\n  if (process.argv.toString().includes(i)) {\n    const isNextArgumentPresent = process.argv[process.argv.indexOf(i) + 1];\n    if (!isNextArgumentPresent) {\n      return fb;\n    }\n    if (isNextArgumentPresent.includes('--')) {\n      return fb;\n    }\n    return type(isNextArgumentPresent);\n  }\n  return fb;\n};\n","import { PrivateCryptoModel, Injectable, FileService } from '@rxdi/core';\nimport { createReadStream, createWriteStream, exists, lstat } from 'fs';\nimport { createGzip, createGunzip } from 'zlib';\nimport { Observable } from 'rxjs';\nimport archiver from 'archiver';\nimport { join } from 'path';\nimport { promisify } from 'util';\n@Injectable()\nexport class CompressionService {\n  constructor(private fileService: FileService) {}\n  public gZipFile(\n    input: string,\n    output: string,\n    options: PrivateCryptoModel = { cyperIv: '', algorithm: '', cyperKey: '' }\n  ) {\n    return new Observable(observer => {\n      createReadStream(input)\n        .pipe(createGzip())\n        // .pipe(createCipheriv(config.algorithm, config.cyperKey, config.cyperIv))\n        .pipe(createWriteStream(output))\n        .on('finish', () => {\n          observer.next(true);\n          observer.complete();\n        })\n        .on('error', err => {\n          observer.error(err);\n          observer.complete();\n        });\n    });\n  }\n\n  public readGzipFile(\n    input: string,\n    output: string,\n    options: PrivateCryptoModel = { cyperIv: '', algorithm: '', cyperKey: '' }\n  ) {\n    return new Observable(observer => {\n      createReadStream(input)\n        // .pipe(createDecipheriv(config.algorithm, config.cyperKey, config.cyperIv))\n        .pipe(createGunzip())\n        .pipe(createWriteStream(output))\n        .on('finish', () => {\n          observer.next(true);\n          observer.complete();\n        })\n        .on('error', err => {\n          observer.error(err);\n          observer.complete();\n        });\n    });\n  }\n\n  public async gZipAll(folder: string, output: string) {\n    const zip = createWriteStream(output);\n    const archive = archiver('tar', {\n      gzip: true,\n      zlib: { level: 9 } // Sets the compression level.\n    });\n    archive.on('error', function(err) {\n      throw err;\n    });\n    archive.pipe(zip);\n    let files: string[] = [];\n    if (await promisify(exists)(folder)) {\n      const file = await promisify(lstat)(folder);\n      if (file && file.isDirectory()) {\n        files = await this.fileService.fileWalker(folder).toPromise();\n      } else if (file.isFile()) {\n        files.push(folder);\n      }\n    } else {\n      throw new Error('Missing file or directory!');\n    }\n    const archiveFiles = [];\n    for (const file of files) {\n      const name = file\n        .replace(process.cwd(), '')\n        .replace(/^\\/|\\/$/g, '')\n        .replace('.', '');\n      archiveFiles.push(name);\n      archive.file(file, {\n        name\n      });\n      console.log(`Added ${name}`);\n    }\n    await archive.finalize();\n    console.log(`Output archive created: ${join(process.cwd(), output)}`);\n    return { archivePath: output, archiveFiles };\n  }\n}\n","import request from 'request';\nimport { createReadStream } from 'fs';\nimport { nextOrDefault } from '../helpers/cli';\nimport { AbstractRunner } from '../tokens';\nimport { Injectable } from '@rxdi/core';\nimport { CompressionService } from '../core/compression.service';\n\n@Injectable()\nexport class AddFile implements AbstractRunner<{ ETag: string }> {\n  constructor(private zip: CompressionService) {}\n  async run() {\n    const file = nextOrDefault('add');\n    // await this.zip.gZipFile(file, './pesho.tar.gz').toPromise();\n    // await this.zip.readGzipFile('./pesho.tar.gz', './out/file.').toPromise();\n    const { archivePath } = await this.zip.gZipAll(\n      file,\n      nextOrDefault('--zip-name', './rxdi.tar.gz')\n    );\n\n    return new Promise<{ ETag: string }>((resolve, reject) => {\n      request.post(\n        {\n          url: nextOrDefault('--url', 'http://0.0.0.0:9000/upload', v =>\n            String(v)\n          ),\n          formData: {\n            file: createReadStream(archivePath)\n          }\n        },\n        (error, response, body) => {\n          if (error) {\n            return reject(error);\n          }\n          resolve(body);\n        }\n      );\n    });\n  }\n}\n","import { AbstractRunner } from '../tokens';\nimport { Container } from '@rxdi/core';\nimport { includes } from './cli';\nimport { AddFile } from '../tasks/add-file';\n\nexport async function Runner<T>() {\n  let task: Function;\n  if (includes('add')) {\n    task = AddFile;\n  }\n  return await Container.get<AbstractRunner<T>>(task).run();\n}\n","import { Runner } from './helpers/runner';\n\nasync function Main() {\n  try {\n    const body = await Runner();\n    console.log(body);\n    process.exit(0);\n  } catch (e) {\n    console.log(e);\n    process.exit(1);\n  }\n}\n\nMain();\n"]}