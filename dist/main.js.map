{"version":3,"sources":["helpers/cli.ts","tokens.ts","core/compression.service.ts","tasks/add-file.ts","tasks/set-config.ts","helpers/runner.ts","main.ts"],"names":[],"mappings":";AAIa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IADA,QAAA,SAAY,CAAA,GAAgB,QAAQ,KAAK,WAAW,SAAS,IAC7D,QAAA,cAAgB,EAAC,EAAa,GAAU,EAAM,EAAO,CAAA,GAAK,MACjE,GAAA,QAAQ,KAAK,WAAW,SAAS,GAAI,CACjC,MAAA,EAAwB,QAAQ,KAAK,QAAQ,KAAK,QAAQ,GAAK,GACjE,OAAC,EAGD,EAAsB,SAAS,MAC1B,EAEF,EAAK,GALH,EAOJ,OAAA;;ACJI,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAXb,MAAA,EAAA,QAAA,cAWa,QAAA,OAAS,IAAI,EAAA,eAAuB;;ACFpC,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,MACA,EAAA,QAAA,QACA,EAAA,QAAA,QACA,EAAA,EAAA,QAAA,aACA,EAAA,QAAA,QACA,EAAA,EAAA,QAAA,cAGA,IAAa,EAAb,MACE,eACO,SACL,EACA,EACA,EAA8B,CAAE,QAAS,GAAI,UAAW,GAAI,SAAU,KAE/D,OAAA,IAAI,EAAA,WAAW,IACpB,EAAA,iBAAiB,GACd,KAAK,EAAA,cAEL,KAAK,EAAA,kBAAkB,IACvB,GAAG,SAAU,KACZ,EAAS,MAAK,GACd,EAAS,aAEV,GAAG,QAAS,IACX,EAAS,MAAM,GACf,EAAS,eAKV,aACL,EACA,EACA,EAA8B,CAAE,QAAS,GAAI,UAAW,GAAI,SAAU,KAE/D,OAAA,IAAI,EAAA,WAAW,IACpB,EAAA,iBAAiB,GAEd,KAAK,EAAA,gBACL,KAAK,EAAA,kBAAkB,IACvB,GAAG,SAAU,KACZ,EAAS,MAAK,GACd,EAAS,aAEV,GAAG,QAAS,IACX,EAAS,MAAM,GACf,EAAS,eAKJ,QAAQ,EAAmB,GA5C7B,OAAA,EAAA,UAAA,OAAA,EAAA,YA6CH,MAAA,EAAM,EAAA,kBAAkB,GACxB,EAAU,EAAA,QAAS,MAAO,CAC9B,KAAM,CAAE,MAAO,KAEjB,EAAQ,GAAG,QAAS,SAAS,GACrB,MAAA,IAER,EAAQ,KAAK,GACP,MAAA,EAAe,GAChB,IAAA,MAAM,WAAc,EAAA,QAAG,EAAS,CACnC,OAAQ,CACN,WACA,mBACA,aACA,mBACO,EAAA,SAAS,MAElB,KAAK,IAEL,EAAQ,KAAK,EAAM,CACjB,KAAA,IAEF,EAAa,KAAK,GAClB,QAAQ,aAAa,KAIhB,aAFD,EAAQ,WACd,QAAQ,+BAA+B,EAAA,KAAK,QAAQ,MAAO,MACpD,CAAE,YAAa,EAAQ,aAAA,OAxErB,EAAkB,EAAA,CAD9B,EAAA,aAC8B,EAAA,oBAAA,KAAlB,GAAA,QAAA,mBAAA;;ACDA,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IARb,MAAA,EAAA,EAAA,QAAA,YACA,EAAA,QAAA,MACA,EAAA,QAAA,kBACA,EAAA,QAAA,aACA,EAAA,QAAA,cACA,EAAA,QAAA,+BAGA,IAAa,EAAb,MACE,YAAoB,GAAA,KAAA,IAAA,EACd,MAFK,OAAA,EAAA,UAAA,OAAA,EAAA,YAGH,MAAA,EAAO,EAAA,cAAc,QAGrB,YAAE,SAAsB,KAAK,IAAI,QACrC,EACA,EAAA,cAAc,aAAc,kBAErB,SAAA,EAAY,GACZ,OAAA,IAAI,QAA0B,CAAC,EAAS,KAC7C,EAAA,QAAQ,KACN,CACE,QAAS,CACP,cACE,EAAA,cAAc,kBAAmB,OAAS,EAAO,OAErD,IAAA,EACA,SAAU,CACR,KAAM,EAAA,iBAAiB,KAG3B,CAAC,EAAO,EAAU,KACZ,GAAA,EACK,OAAA,EAAO,GAEhB,EAAQ,OAKV,MAAA,EAAS,EAAA,UAAU,IAAI,EAAA,QACzB,IAAA,EAEA,IACI,MAAA,EACJ,EAAA,cAAc,QAAS,OACvB,EAAO,UACP,6BAGE,GAFJ,QAAQ,mCAAmC,KAEtB,iBADrB,QAAa,EAAY,IACM,CACzB,IAAA,EAAa,GACb,IACF,EAAS,KAAK,MAAM,GACpB,MAAO,IACL,GAAA,EAAM,YAAmC,QAArB,EAAM,WACtB,MAAA,IAAI,MAAM,IAGpB,MAAO,GACP,QAAQ,IAAI,0BACZ,QAAQ,MAAM,GACd,QAAQ,IAAI,0DACR,IACF,QAAa,EAAY,8BACzB,MAAO,GACP,QAAQ,MAAM,GACd,QAAQ,IAAI,qCAGT,OAAA,MA9DE,EAAO,EAAA,CADnB,EAAA,aAE0B,EAAA,oBAAA,CAAkB,mBAAlB,OAAkB,IAAlB,EAAA,oBAAA,EAAA,oBAAkB,EAAA,UADhC,GAAA,QAAA,QAAA;;ACCA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATb,MAAA,EAAA,QAAA,MAEA,EAAA,QAAA,cACA,EAAA,QAAA,QACA,EAAA,QAAA,QACA,EAAA,QAAA,MACA,EAAA,QAAA,kBAGA,IAAa,EAAb,MACE,eACM,MAFK,OAAA,EAAA,UAAA,OAAA,EAAA,YAGH,MAAA,EAAW,EAAA,KAAK,EAAA,UAAW,qBAC7B,IAAA,EAAS,CACX,MAAO,EAAA,cAAc,kBAAmB,MACxC,SAAU,EAAA,cAAc,QAAS,OAE/B,IACF,EAAS,KAAK,MAAM,EAAA,cAAc,QAClC,MAAO,IAIF,aAHD,EAAA,UAAU,EAAA,UAAV,CAAqB,EAAU,KAAK,UAAU,EAAQ,KAAM,GAAI,CACpE,SAAU,UAEL,MAdE,EAAS,EAAA,CADrB,EAAA,aACqB,EAAA,oBAAA,KAAT,GAAA,QAAA,UAAA;;ACHb,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALA,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,SACA,EAAA,QAAA,qBACA,EAAA,QAAA,uBAEA,SAAsB,IAAtB,OAAA,EAAA,UAAA,OAAA,EAAA,YACM,IAAA,EAQG,OAPH,EAAA,SAAS,SACX,EAAO,EAAA,SAEL,EAAA,SAAS,SACX,EAAO,EAAA,iBAGI,EAAA,UAAU,IAAuB,GAAM,QATtD,QAAA,OAAA;;ACuBI,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7BJ,MAAA,EAAA,QAAA,oBACA,EAAA,QAAA,QACA,EAAA,QAAA,MACA,EAAA,QAAA,QACA,EAAA,QAAA,MACA,EAAA,QAAA,cACA,EAAA,QAAA,YAEA,SAAe,IAqBX,OAAA,EAAA,UAAA,OAAA,EAAA,YApBE,IACE,IAAA,EAAiB,GACf,MAAA,EAAa,EAAA,KAAK,EAAA,UAAW,qBAC/B,SAAM,EAAA,UAAU,EAAA,OAAV,CAAkB,GACtB,IACF,EAAS,QAAQ,GACjB,MAAO,GACP,QAAQ,SAAS,wCAGrB,EAAA,UAAU,IAAI,EAAA,OAAQ,GAChB,MAAA,QAAa,EAAA,SACnB,QAAQ,IAAI,GACZ,QAAQ,KAAK,GACb,MAAO,GACP,QAAQ,IAAI,GACZ,QAAQ,KAAK,MAIjB","file":"main.js","sourceRoot":"../src","sourcesContent":["\nexport type Commands = 'add' | '--deploy' | '--url' | '--zip-name' | '--authorization' | 'set';\n\nexport const includes = (i: Commands) => process.argv.toString().includes(i);\nexport const nextOrDefault = (i: Commands, fb: any = true, type = p => p) => {\n  if (process.argv.toString().includes(i)) {\n    const isNextArgumentPresent = process.argv[process.argv.indexOf(i) + 1];\n    if (!isNextArgumentPresent) {\n      return fb;\n    }\n    if (isNextArgumentPresent.includes('--')) {\n      return fb;\n    }\n    return type(isNextArgumentPresent);\n  }\n  return fb;\n};\n","import { InjectionToken } from '@rxdi/core';\n\nexport interface AbstractRunner<T> {\n  run(): Promise<T>;\n}\n\nexport interface Config {\n  token: string;\n  registry: string;\n}\n\nexport const Config = new InjectionToken<Config>('rxdi-registry-client-config');\n","import { PrivateCryptoModel, Injectable } from '@rxdi/core';\nimport { createReadStream, createWriteStream } from 'fs';\nimport { createGzip, createGunzip } from 'zlib';\nimport { Observable } from 'rxjs';\nimport archiver from 'archiver';\nimport { join, basename } from 'path';\nimport fg from 'fast-glob';\n\n@Injectable()\nexport class CompressionService {\n  constructor() {}\n  public gZipFile(\n    input: string,\n    output: string,\n    options: PrivateCryptoModel = { cyperIv: '', algorithm: '', cyperKey: '' }\n  ) {\n    return new Observable(observer => {\n      createReadStream(input)\n        .pipe(createGzip())\n        // .pipe(createCipheriv(config.algorithm, config.cyperKey, config.cyperIv))\n        .pipe(createWriteStream(output))\n        .on('finish', () => {\n          observer.next(true);\n          observer.complete();\n        })\n        .on('error', err => {\n          observer.error(err);\n          observer.complete();\n        });\n    });\n  }\n\n  public readGzipFile(\n    input: string,\n    output: string,\n    options: PrivateCryptoModel = { cyperIv: '', algorithm: '', cyperKey: '' }\n  ) {\n    return new Observable(observer => {\n      createReadStream(input)\n        // .pipe(createDecipheriv(config.algorithm, config.cyperKey, config.cyperIv))\n        .pipe(createGunzip())\n        .pipe(createWriteStream(output))\n        .on('finish', () => {\n          observer.next(true);\n          observer.complete();\n        })\n        .on('error', err => {\n          observer.error(err);\n          observer.complete();\n        });\n    });\n  }\n\n  public async gZipAll(folders: string[], output: string) {\n    const zip = createWriteStream(output);\n    const archive = archiver('tar', {\n      zlib: { level: 9 } // Sets the compression level.\n    });\n    archive.on('error', function(err) {\n      throw err;\n    });\n    archive.pipe(zip);\n    const archiveFiles = [];\n    for (const name of await fg(folders, {\n      ignore: [\n        '!**/.git',\n        '!**/node_modules',\n        '!**/.cache',\n        '!**/.rxdi',\n        `!**/${basename(output)}`,\n      ],\n      dot: true\n    })) {\n      archive.file(name, {\n        name\n      });\n      archiveFiles.push(name);\n      console.log(`Added ${name}`);\n    }\n    await archive.finalize();\n    console.log(`Output archive created: ${join(process.cwd(), output)}`);\n    return { archivePath: output, archiveFiles };\n  }\n}\n","import request from 'request';\nimport { createReadStream } from 'fs';\nimport { nextOrDefault } from '../helpers/cli';\nimport { AbstractRunner, Config } from '../tokens';\nimport { Injectable, Container } from '@rxdi/core';\nimport { CompressionService } from '../core/compression.service';\n\n@Injectable()\nexport class AddFile implements AbstractRunner<{ ETag: string }> {\n  constructor(private zip: CompressionService) {}\n  async run() {\n    const file = nextOrDefault('add');\n    // await this.zip.gZipFile(file, './pesho.tar.gz').toPromise();\n    // await this.zip.readGzipFile('./pesho.tar.gz', './out/file.').toPromise();\n    const { archivePath } = await this.zip.gZipAll(\n      file,\n      nextOrDefault('--zip-name', './rxdi.tar.gz')\n    );\n    function postRequest(url: string) {\n      return new Promise<{ ETag: string }>((resolve, reject) => {\n        request.post(\n          {\n            headers: {\n              authorization:\n                nextOrDefault('--authorization', null) || config.token\n            },\n            url,\n            formData: {\n              file: createReadStream(archivePath)\n            }\n          },\n          (error, response, body) => {\n            if (error) {\n              return reject(error);\n            }\n            resolve(body);\n          }\n        );\n      });\n    }\n    const config = Container.get(Config);\n    let data: any;\n\n    try {\n      const endpoint =\n        nextOrDefault('--url', null) ||\n        config.registry ||\n        'http://0.0.0.0:9000/upload';\n      console.log(`Uploading file to endpoint: ${endpoint}`);\n      data = await postRequest(endpoint);\n      if (typeof(data) === 'string') {\n        let parse: any = {};\n        try {\n          parse =  JSON.parse(data);\n        } catch (e) {}\n        if (parse.statusCode && parse.statusCode !== '200') {\n          throw new Error(data);\n        }\n      }\n    } catch (e) {\n      console.log(`Uploading file failed!`);\n      console.error(e);\n      console.log('Re-trying with endpoint: http://0.0.0.0:9000/upload...');\n      try {\n        data = await postRequest('http://0.0.0.0:9000/upload');\n      } catch (e) {\n        console.error(e);\n        console.log('Re-trying failed. Upload Failed!');\n      }\n    }\n    return data;\n  }\n}\n","import { writeFile } from 'fs';\nimport { AbstractRunner } from '../tokens';\nimport { Injectable } from '@rxdi/core';\nimport { promisify } from 'util';\nimport { join } from 'path';\nimport { homedir } from 'os';\nimport { nextOrDefault } from '../helpers/cli';\n\n@Injectable()\nexport class SetConfig implements AbstractRunner<string> {\n  constructor() {}\n  async run() {\n    const filePath = join(homedir(), '.rxdi/config.json');\n    let config = {\n      token: nextOrDefault('--authorization', null),\n      registry: nextOrDefault('--url', null)\n    };\n    try {\n      config = JSON.parse(nextOrDefault('set'));\n    } catch (e) {}\n    await promisify(writeFile)(filePath, JSON.stringify(config, null, 2), {\n      encoding: 'utf-8'\n    });\n    return filePath;\n  }\n}\n","import { AbstractRunner } from '../tokens';\nimport { Container } from '@rxdi/core';\nimport { includes } from './cli';\nimport { AddFile } from '../tasks/add-file';\nimport { SetConfig } from '../tasks/set-config';\n\nexport async function Runner<T>() {\n  let task: Function;\n  if (includes('add')) {\n    task = AddFile;\n  }\n  if (includes('set')) {\n    task = SetConfig;\n  }\n\n  return await Container.get<AbstractRunner<T>>(task).run();\n}\n","import { Runner } from './helpers/runner';\nimport { promisify } from 'util';\nimport { exists } from 'fs';\nimport { join } from 'path';\nimport { homedir } from 'os';\nimport { Container } from '@rxdi/core';\nimport { Config } from './tokens';\n\nasync function Main() {\n  try {\n    let config: Config = {} as Config;\n    const configPath = join(homedir(), '.rxdi/config.json');\n    if (await promisify(exists)(configPath)) {\n      try {\n        config = require(configPath);\n      } catch (e) {\n        console.error(`${configPath} present but it is not a valid json`);\n      }\n    }\n    Container.set(Config, config);\n    const body = await Runner();\n    console.log(body);\n    process.exit(0);\n  } catch (e) {\n    console.log(e);\n    process.exit(1);\n  }\n}\n\nMain();\n"]}